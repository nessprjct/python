# -*- coding: utf-8 -*-
"""ArithmeticFormatter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aAFCr963U8PlKj2TiT80IGMYwGHalwd3
"""

def arithmetic_arranger(problems, answer=False):

    if len(problems) > 5:
        return "Error: Too many problems."

    operator = []
    fOperand = []
    sOperand = []

    for problem in problems:
        pieces = problem.split()
        fOperand.append(pieces[0])
        operator.append(pieces[1])
        sOperand.append(pieces[2])

    # Check
    if "*" in operator or "/" in operator:
        return "Error: Operator must be '+' or '-'."

    # digits
    for i in range(len(fOperand)):
        if not (fOperand[i].isdigit() and sOperand[i].isdigit()):
            return "Error: Numbers must only contain digits."

    # length
    for i in range(len(fOperand)):
        if len(fOperand[i]) > 4 or len(sOperand[i]) > 4:
            return "Error: Numbers cannot be more than four digits."

    first_line = []
    second_line = []
    third_line = []
    fourth_line = []

    for i in range(len(fOperand)):
        if len(fOperand[i]) > len(sOperand[i]):
            first_line.append(" "*2 + fOperand[i])
        else:
            first_line.append(" "*(len(sOperand[i]) - len(fOperand[i]) + 2) + fOperand[i])

    for i in range(len(sOperand)):
        if len(sOperand[i]) > len(fOperand[i]):
            second_line.append(operator[i] + " " + sOperand[i])
        else:
            second_line.append(operator[i] + " "*(len(fOperand[i]) - len(sOperand[i]) + 1) + sOperand[i])

    for i in range(len(fOperand)):
        third_line.append("-"*(max(len(fOperand[i]), len(sOperand[i])) + 2))

    if answer:
        for i in range(len(fOperand)):
            if operator[i] == "+":
                ans = str(int(fOperand[i]) + int(sOperand[i]))
            else:
                ans = str(int(fOperand[i]) - int(sOperand[i]))

            if len(ans) > max(len(fOperand[i]), len(sOperand[i])):
                fourth_line.append(" " + ans)
            else:
                fourth_line.append(" "*(max(len(fOperand[i]), len(sOperand[i])) - len(ans) + 2) + ans)
        arranged_problems = "    ".join(first_line) + "\n" + "    ".join(second_line) + "\n" + "    ".join(third_line) + "\n" + "    ".join(fourth_line)
    else:
        arranged_problems = "    ".join(first_line) + "\n" + "    ".join(second_line) + "\n" + "    ".join(third_line)
    return arranged_problems